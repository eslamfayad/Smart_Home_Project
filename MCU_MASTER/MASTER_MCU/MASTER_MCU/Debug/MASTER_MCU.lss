
MASTER_MCU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000062c  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 000001b0  00000000  00000000  0000065b  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000029de  00000000  00000000  0000080b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000a94  00000000  00000000  000031e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000df1  00000000  00000000  00003c7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000328  00000000  00000000  00004a70  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000002a4  00000000  00000000  00004d98  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000010d8  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000150  00000000  00000000  00006114  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000005b4  000005b4  00000628  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00006264  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.LCD_Command_4bit 000000a6  00000250  00000250  000002c4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.LCD_Init_4bit 00000042  000004da  000004da  0000054e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.LCD_WriteChar_4bit 000000a6  000002f6  000002f6  0000036a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.LCD_WRITE_STRING_4bit 00000026  0000051c  0000051c  00000590  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.Led_Init 00000020  00000542  00000542  000005b6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .progmemx.data 0000000b  0000006c  0000006c  000000e0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, PROGMEMX
 19 .text.main    00000084  0000039c  0000039c  00000410  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.DIO_SetPortDirection 00000074  00000420  00000420  00000494  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.DIO_SetPinDirection 000000ec  00000078  00000078  000000ec  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 22 .text.DIO_SetPinValue 000000ec  00000164  00000164  000001d8  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 23 .text.Spi_MasterInit 00000046  00000494  00000494  00000508  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 24 .text.Spi_MasterWrite 0000001a  00000562  00000562  000005d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 25 .text.UART_Init 00000018  00000596  00000596  0000060a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 26 .text.UART_Read 00000006  000005ae  000005ae  00000622  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 27 .text.libgcc  0000001a  0000057c  0000057c  000005f0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
   8:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
   c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  10:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  14:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  18:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  1c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  20:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  24:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  28:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  2c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  30:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  34:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  38:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  3c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  40:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  44:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  48:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  4c:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>
  50:	0c 94 da 02 	jmp	0x5b4	; 0x5b4 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 ce 01 	call	0x39c	; 0x39c <main>
  64:	0c 94 34 00 	jmp	0x68	; 0x68 <_exit>

00000068 <_exit>:
  68:	f8 94       	cli

0000006a <__stop_program>:
  6a:	ff cf       	rjmp	.-2      	; 0x6a <__stop_program>

Disassembly of section .text:

000005b4 <__bad_interrupt>:
 5b4:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.LCD_Command_4bit:

00000250 <LCD_Command_4bit>:
	LCD_Command_4bit(0x01);	/* Clear display screen */
}


void LCD_Command_4bit( uint_8 CMD )
{
 250:	cf 93       	push	r28
 252:	c8 2f       	mov	r28, r24
	 LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (CMD & 0xF0);   /* Sending upper nibble */
 254:	8b b3       	in	r24, 0x1b	; 27
 256:	8f 70       	andi	r24, 0x0F	; 15
 258:	9c 2f       	mov	r25, r28
 25a:	90 7f       	andi	r25, 0xF0	; 240
 25c:	89 2b       	or	r24, r25
 25e:	8b bb       	out	0x1b, r24	; 27
	 DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RS , LOW);
 260:	40 e0       	ldi	r20, 0x00	; 0
 262:	61 e0       	ldi	r22, 0x01	; 1
 264:	81 e0       	ldi	r24, 0x01	; 1
 266:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	 DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RW , LOW);
 26a:	40 e0       	ldi	r20, 0x00	; 0
 26c:	62 e0       	ldi	r22, 0x02	; 2
 26e:	81 e0       	ldi	r24, 0x01	; 1
 270:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	 DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , HIGH);
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27e:	8f e1       	ldi	r24, 0x1F	; 31
 280:	9e e4       	ldi	r25, 0x4E	; 78
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_Command_4bit+0x32>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_Command_4bit+0x38>
 288:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , LOW);
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 294:	8f e1       	ldi	r24, 0x1F	; 31
 296:	9e e4       	ldi	r25, 0x4E	; 78
 298:	01 97       	sbiw	r24, 0x01	; 1
 29a:	f1 f7       	brne	.-4      	; 0x298 <LCD_Command_4bit+0x48>
 29c:	00 c0       	rjmp	.+0      	; 0x29e <LCD_Command_4bit+0x4e>
 29e:	00 00       	nop
	_delay_ms(5);
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (CMD << 4);            /* Sending lower nibble */
 2a0:	2b b3       	in	r18, 0x1b	; 27
 2a2:	30 e1       	ldi	r19, 0x10	; 16
 2a4:	c3 9f       	mul	r28, r19
 2a6:	c0 01       	movw	r24, r0
 2a8:	11 24       	eor	r1, r1
 2aa:	92 2f       	mov	r25, r18
 2ac:	9f 70       	andi	r25, 0x0F	; 15
 2ae:	89 2b       	or	r24, r25
 2b0:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RS , LOW);
 2b2:	40 e0       	ldi	r20, 0x00	; 0
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RW , LOW);
 2bc:	40 e0       	ldi	r20, 0x00	; 0
 2be:	62 e0       	ldi	r22, 0x02	; 2
 2c0:	81 e0       	ldi	r24, 0x01	; 1
 2c2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , HIGH);
 2c6:	41 e0       	ldi	r20, 0x01	; 1
 2c8:	63 e0       	ldi	r22, 0x03	; 3
 2ca:	81 e0       	ldi	r24, 0x01	; 1
 2cc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2d0:	8f e1       	ldi	r24, 0x1F	; 31
 2d2:	9e e4       	ldi	r25, 0x4E	; 78
 2d4:	01 97       	sbiw	r24, 0x01	; 1
 2d6:	f1 f7       	brne	.-4      	; 0x2d4 <LCD_Command_4bit+0x84>
 2d8:	00 c0       	rjmp	.+0      	; 0x2da <LCD_Command_4bit+0x8a>
 2da:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , LOW);
 2dc:	40 e0       	ldi	r20, 0x00	; 0
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	81 e0       	ldi	r24, 0x01	; 1
 2e2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 2e6:	8f e1       	ldi	r24, 0x1F	; 31
 2e8:	9e e4       	ldi	r25, 0x4E	; 78
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <LCD_Command_4bit+0x9a>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <LCD_Command_4bit+0xa0>
 2f0:	00 00       	nop
     _delay_ms(5);
	 }
 2f2:	cf 91       	pop	r28
 2f4:	08 95       	ret

Disassembly of section .text.LCD_Init_4bit:

000004da <LCD_Init_4bit>:
}
/*///////////////////                   4BIT MODE  //////////  ////////////////////*/

void LCD_Init_4bit (void)  /* LCD Initialize function */
{
	DIO_SetPortDirection(LCD_DATA_PORT ,OUTPUT);/* Make LCD Data port direction as o/p */
 4da:	8b b3       	in	r24, 0x1b	; 27
 4dc:	61 e0       	ldi	r22, 0x01	; 1
 4de:	0e 94 10 02 	call	0x420	; 0x420 <DIO_SetPortDirection>
	DIO_SetPortDirection(LCD_CONTROL_PORT ,OUTPUT);	  /* Make LCD command port direction as o/p */
 4e2:	61 e0       	ldi	r22, 0x01	; 1
 4e4:	81 e0       	ldi	r24, 0x01	; 1
 4e6:	0e 94 10 02 	call	0x420	; 0x420 <DIO_SetPortDirection>
 4ea:	8f e5       	ldi	r24, 0x5F	; 95
 4ec:	9a ee       	ldi	r25, 0xEA	; 234
 4ee:	01 97       	sbiw	r24, 0x01	; 1
 4f0:	f1 f7       	brne	.-4      	; 0x4ee <LCD_Init_4bit+0x14>
 4f2:	00 c0       	rjmp	.+0      	; 0x4f4 <LCD_Init_4bit+0x1a>
 4f4:	00 00       	nop
	_delay_ms(15);		/* LCD Power ON delay always >15ms */
	
	LCD_Command_4bit(0x33);
 4f6:	83 e3       	ldi	r24, 0x33	; 51
 4f8:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Command_4bit>
	LCD_Command_4bit(0x32);	/* Send for 4 bit initialization of LCD  */
 4fc:	82 e3       	ldi	r24, 0x32	; 50
 4fe:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Command_4bit>
	LCD_Command_4bit(0x28);	/* 2 line, 5*7 matrix in 4-bit mode */
 502:	88 e2       	ldi	r24, 0x28	; 40
 504:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Command_4bit>
	LCD_Command_4bit(0x0c);	/* Display on cursor off */
 508:	8c e0       	ldi	r24, 0x0C	; 12
 50a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Command_4bit>
	LCD_Command_4bit(0x06);	/* Increment cursor (shift cursor to right) */
 50e:	86 e0       	ldi	r24, 0x06	; 6
 510:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Command_4bit>
	LCD_Command_4bit(0x01);	/* Clear display screen */
 514:	81 e0       	ldi	r24, 0x01	; 1
 516:	0e 94 28 01 	call	0x250	; 0x250 <LCD_Command_4bit>
 51a:	08 95       	ret

Disassembly of section .text.LCD_WriteChar_4bit:

000002f6 <LCD_WriteChar_4bit>:
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , LOW);
     _delay_ms(5);
	 }

void LCD_WriteChar_4bit( uint_8 DATA )
{
 2f6:	cf 93       	push	r28
 2f8:	c8 2f       	mov	r28, r24
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (DATA & 0xF0);   /* Sending upper nibble */
 2fa:	8b b3       	in	r24, 0x1b	; 27
 2fc:	8f 70       	andi	r24, 0x0F	; 15
 2fe:	9c 2f       	mov	r25, r28
 300:	90 7f       	andi	r25, 0xF0	; 240
 302:	89 2b       	or	r24, r25
 304:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RS , HIGH);
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	61 e0       	ldi	r22, 0x01	; 1
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RW , LOW);
 310:	40 e0       	ldi	r20, 0x00	; 0
 312:	62 e0       	ldi	r22, 0x02	; 2
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , HIGH);
 31a:	41 e0       	ldi	r20, 0x01	; 1
 31c:	63 e0       	ldi	r22, 0x03	; 3
 31e:	81 e0       	ldi	r24, 0x01	; 1
 320:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 324:	8f e1       	ldi	r24, 0x1F	; 31
 326:	9e e4       	ldi	r25, 0x4E	; 78
 328:	01 97       	sbiw	r24, 0x01	; 1
 32a:	f1 f7       	brne	.-4      	; 0x328 <LCD_WriteChar_4bit+0x32>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <LCD_WriteChar_4bit+0x38>
 32e:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , LOW);
 330:	40 e0       	ldi	r20, 0x00	; 0
 332:	63 e0       	ldi	r22, 0x03	; 3
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 33a:	8f e1       	ldi	r24, 0x1F	; 31
 33c:	9e e4       	ldi	r25, 0x4E	; 78
 33e:	01 97       	sbiw	r24, 0x01	; 1
 340:	f1 f7       	brne	.-4      	; 0x33e <LCD_WriteChar_4bit+0x48>
 342:	00 c0       	rjmp	.+0      	; 0x344 <LCD_WriteChar_4bit+0x4e>
 344:	00 00       	nop
	_delay_ms(5);
	
	LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (DATA << 4);            /* Sending lower nibble */
 346:	2b b3       	in	r18, 0x1b	; 27
 348:	30 e1       	ldi	r19, 0x10	; 16
 34a:	c3 9f       	mul	r28, r19
 34c:	c0 01       	movw	r24, r0
 34e:	11 24       	eor	r1, r1
 350:	92 2f       	mov	r25, r18
 352:	9f 70       	andi	r25, 0x0F	; 15
 354:	89 2b       	or	r24, r25
 356:	8b bb       	out	0x1b, r24	; 27
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RS , HIGH);
 358:	41 e0       	ldi	r20, 0x01	; 1
 35a:	61 e0       	ldi	r22, 0x01	; 1
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_RW , LOW);
 362:	40 e0       	ldi	r20, 0x00	; 0
 364:	62 e0       	ldi	r22, 0x02	; 2
 366:	81 e0       	ldi	r24, 0x01	; 1
 368:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , HIGH);
 36c:	41 e0       	ldi	r20, 0x01	; 1
 36e:	63 e0       	ldi	r22, 0x03	; 3
 370:	81 e0       	ldi	r24, 0x01	; 1
 372:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 376:	8f e1       	ldi	r24, 0x1F	; 31
 378:	9e e4       	ldi	r25, 0x4E	; 78
 37a:	01 97       	sbiw	r24, 0x01	; 1
 37c:	f1 f7       	brne	.-4      	; 0x37a <LCD_WriteChar_4bit+0x84>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <LCD_WriteChar_4bit+0x8a>
 380:	00 00       	nop
	_delay_ms(5);
	DIO_SetPinValue(LCD_CONTROL_PORT , LCD_EN , LOW);
 382:	40 e0       	ldi	r20, 0x00	; 0
 384:	63 e0       	ldi	r22, 0x03	; 3
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 38c:	8f e1       	ldi	r24, 0x1F	; 31
 38e:	9e e4       	ldi	r25, 0x4E	; 78
 390:	01 97       	sbiw	r24, 0x01	; 1
 392:	f1 f7       	brne	.-4      	; 0x390 <LCD_WriteChar_4bit+0x9a>
 394:	00 c0       	rjmp	.+0      	; 0x396 <LCD_WriteChar_4bit+0xa0>
 396:	00 00       	nop
	_delay_ms(5);
}
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

Disassembly of section .text.LCD_WRITE_STRING_4bit:

0000051c <LCD_WRITE_STRING_4bit>:

void LCD_WRITE_STRING_4bit(char  STRING[] )
{
 51c:	0f 93       	push	r16
 51e:	1f 93       	push	r17
 520:	cf 93       	push	r28
 522:	8c 01       	movw	r16, r24
	uint_8 i = 0;
 524:	c0 e0       	ldi	r28, 0x00	; 0
	while( STRING[i] != '\0' )
 526:	03 c0       	rjmp	.+6      	; 0x52e <LCD_WRITE_STRING_4bit+0x12>
	{
		LCD_WriteChar_4bit( STRING[i]);
 528:	0e 94 7b 01 	call	0x2f6	; 0x2f6 <LCD_WriteChar_4bit>
		i++;
 52c:	cf 5f       	subi	r28, 0xFF	; 255
}

void LCD_WRITE_STRING_4bit(char  STRING[] )
{
	uint_8 i = 0;
	while( STRING[i] != '\0' )
 52e:	f8 01       	movw	r30, r16
 530:	ec 0f       	add	r30, r28
 532:	f1 1d       	adc	r31, r1
 534:	80 81       	ld	r24, Z
 536:	81 11       	cpse	r24, r1
 538:	f7 cf       	rjmp	.-18     	; 0x528 <LCD_WRITE_STRING_4bit+0xc>
		LCD_WriteChar_4bit( STRING[i]);
		i++;
		
	}
	
}
 53a:	cf 91       	pop	r28
 53c:	1f 91       	pop	r17
 53e:	0f 91       	pop	r16
 540:	08 95       	ret

Disassembly of section .text.Led_Init:

00000542 <Led_Init>:

#include "Led_Interface.h"

void Led_Init(void)
{
	DIO_SetPinDirection(LED0_PORT, LED0_CHANNEL, OUTPUT);
 542:	41 e0       	ldi	r20, 0x01	; 1
 544:	62 e0       	ldi	r22, 0x02	; 2
 546:	82 e0       	ldi	r24, 0x02	; 2
 548:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED1_PORT, LED1_CHANNEL, OUTPUT);
 54c:	41 e0       	ldi	r20, 0x01	; 1
 54e:	67 e0       	ldi	r22, 0x07	; 7
 550:	82 e0       	ldi	r24, 0x02	; 2
 552:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
	DIO_SetPinDirection(LED2_PORT, LED2_CHANNEL, OUTPUT);
 556:	41 e0       	ldi	r20, 0x01	; 1
 558:	63 e0       	ldi	r22, 0x03	; 3
 55a:	83 e0       	ldi	r24, 0x03	; 3
 55c:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
 560:	08 95       	ret

Disassembly of section .text.main:

0000039c <main>:
#include "Led_Interface.h"
#include <avr/interrupt.h>


int main(void)
{
 39c:	cf 93       	push	r28
 39e:	df 93       	push	r29
 3a0:	cd b7       	in	r28, 0x3d	; 61
 3a2:	de b7       	in	r29, 0x3e	; 62
 3a4:	2b 97       	sbiw	r28, 0x0b	; 11
 3a6:	0f b6       	in	r0, 0x3f	; 63
 3a8:	f8 94       	cli
 3aa:	de bf       	out	0x3e, r29	; 62
 3ac:	0f be       	out	0x3f, r0	; 63
 3ae:	cd bf       	out	0x3d, r28	; 61
	uint_8 ON[]="LED_ON";
	uint_8 OFF[]="LED_OFF";
	uint_8 i =0;
	uint_8 name[]="MASTER MCU";
 3b0:	2c e6       	ldi	r18, 0x6C	; 108
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e0       	ldi	r20, 0x00	; 0
 3b6:	8b e0       	ldi	r24, 0x0B	; 11
 3b8:	f9 01       	movw	r30, r18
 3ba:	de 01       	movw	r26, r28
 3bc:	11 96       	adiw	r26, 0x01	; 1
 3be:	74 2f       	mov	r23, r20
 3c0:	0e 94 be 02 	call	0x57c	; 0x57c <__movmemx_qi>
	uint_8 Command= 0;
	UART_Init(UART_BAUDRATE_9600);
 3c4:	87 e6       	ldi	r24, 0x67	; 103
 3c6:	90 e0       	ldi	r25, 0x00	; 0
 3c8:	0e 94 cb 02 	call	0x596	; 0x596 <UART_Init>
	Spi_MasterInit();
 3cc:	0e 94 4a 02 	call	0x494	; 0x494 <Spi_MasterInit>
	Led_Init();
 3d0:	0e 94 a1 02 	call	0x542	; 0x542 <Led_Init>
    LCD_Init_4bit();
 3d4:	0e 94 6d 02 	call	0x4da	; 0x4da <LCD_Init_4bit>
	LCD_WRITE_STRING_4bit(name);
 3d8:	ce 01       	movw	r24, r28
 3da:	01 96       	adiw	r24, 0x01	; 1
 3dc:	0e 94 8e 02 	call	0x51c	; 0x51c <LCD_WRITE_STRING_4bit>
 3e0:	2f ef       	ldi	r18, 0xFF	; 255
 3e2:	31 ee       	ldi	r19, 0xE1	; 225
 3e4:	84 e0       	ldi	r24, 0x04	; 4
 3e6:	21 50       	subi	r18, 0x01	; 1
 3e8:	30 40       	sbci	r19, 0x00	; 0
 3ea:	80 40       	sbci	r24, 0x00	; 0
 3ec:	e1 f7       	brne	.-8      	; 0x3e6 <main+0x4a>
 3ee:	00 c0       	rjmp	.+0      	; 0x3f0 <main+0x54>
 3f0:	00 00       	nop
	//DIO_SetPinValue(DIO_PORTC);
	//UART_Send(x);
	//UART_SendStr(OK[1]);
    while(1)
    {
		Command = UART_Read();    //read from uart and save it to variable
 3f2:	0e 94 d7 02 	call	0x5ae	; 0x5ae <UART_Read>
 3f6:	9f ef       	ldi	r25, 0xFF	; 255
 3f8:	21 ee       	ldi	r18, 0xE1	; 225
 3fa:	34 e0       	ldi	r19, 0x04	; 4
 3fc:	91 50       	subi	r25, 0x01	; 1
 3fe:	20 40       	sbci	r18, 0x00	; 0
 400:	30 40       	sbci	r19, 0x00	; 0
 402:	e1 f7       	brne	.-8      	; 0x3fc <main+0x60>
 404:	00 c0       	rjmp	.+0      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 406:	00 00       	nop
	     _delay_ms(100);
		Spi_MasterWrite(Command);
 408:	0e 94 b1 02 	call	0x562	; 0x562 <Spi_MasterWrite>
 40c:	8f ef       	ldi	r24, 0xFF	; 255
 40e:	91 ee       	ldi	r25, 0xE1	; 225
 410:	24 e0       	ldi	r18, 0x04	; 4
 412:	81 50       	subi	r24, 0x01	; 1
 414:	90 40       	sbci	r25, 0x00	; 0
 416:	20 40       	sbci	r18, 0x00	; 0
 418:	e1 f7       	brne	.-8      	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 41c:	00 00       	nop
 41e:	e9 cf       	rjmp	.-46     	; 0x3f2 <main+0x56>

Disassembly of section .text.DIO_SetPortDirection:

00000420 <DIO_SetPortDirection>:
*/

void DIO_SetPortDirection(uint_8 PortID ,uint_8 Direction)
{
	//Range check
	if (PortID <4 )
 420:	84 30       	cpi	r24, 0x04	; 4
 422:	b8 f5       	brcc	.+110    	; 0x492 <DIO_SetPortDirection+0x72>
	{
		if(Direction==OUTPUT)
 424:	61 30       	cpi	r22, 0x01	; 1
 426:	a1 f4       	brne	.+40     	; 0x450 <DIO_SetPortDirection+0x30>
			{
				switch(PortID)
 428:	81 30       	cpi	r24, 0x01	; 1
 42a:	49 f0       	breq	.+18     	; 0x43e <DIO_SetPortDirection+0x1e>
 42c:	28 f0       	brcs	.+10     	; 0x438 <DIO_SetPortDirection+0x18>
 42e:	82 30       	cpi	r24, 0x02	; 2
 430:	49 f0       	breq	.+18     	; 0x444 <DIO_SetPortDirection+0x24>
 432:	83 30       	cpi	r24, 0x03	; 3
 434:	51 f0       	breq	.+20     	; 0x44a <DIO_SetPortDirection+0x2a>
 436:	08 95       	ret
				{
					case DIO_PORTA : DDRA_REG = 0xFF; break;
 438:	8f ef       	ldi	r24, 0xFF	; 255
 43a:	8a bb       	out	0x1a, r24	; 26
 43c:	08 95       	ret
					case DIO_PORTB : DDRB_REG = 0xFF; break;
 43e:	8f ef       	ldi	r24, 0xFF	; 255
 440:	87 bb       	out	0x17, r24	; 23
 442:	08 95       	ret
					case DIO_PORTC : DDRC_REG = 0xFF; break;
 444:	8f ef       	ldi	r24, 0xFF	; 255
 446:	84 bb       	out	0x14, r24	; 20
 448:	08 95       	ret
					case DIO_PORTD : DDRD_REG = 0xFF; break;
 44a:	8f ef       	ldi	r24, 0xFF	; 255
 44c:	81 bb       	out	0x11, r24	; 17
 44e:	08 95       	ret
				}
			}
		else if (Direction==INPUT)
 450:	61 11       	cpse	r22, r1
 452:	10 c0       	rjmp	.+32     	; 0x474 <DIO_SetPortDirection+0x54>
		   {
			   switch(PortID)
 454:	81 30       	cpi	r24, 0x01	; 1
 456:	41 f0       	breq	.+16     	; 0x468 <DIO_SetPortDirection+0x48>
 458:	28 f0       	brcs	.+10     	; 0x464 <DIO_SetPortDirection+0x44>
 45a:	82 30       	cpi	r24, 0x02	; 2
 45c:	39 f0       	breq	.+14     	; 0x46c <DIO_SetPortDirection+0x4c>
 45e:	83 30       	cpi	r24, 0x03	; 3
 460:	39 f0       	breq	.+14     	; 0x470 <DIO_SetPortDirection+0x50>
 462:	08 95       	ret
				{
					case DIO_PORTA : DDRA_REG = 0x00; break;
 464:	1a ba       	out	0x1a, r1	; 26
 466:	08 95       	ret
					case DIO_PORTB : DDRB_REG = 0x00; break;
 468:	17 ba       	out	0x17, r1	; 23
 46a:	08 95       	ret
					case DIO_PORTC : DDRC_REG = 0x00; break;
 46c:	14 ba       	out	0x14, r1	; 20
 46e:	08 95       	ret
					case DIO_PORTD : DDRD_REG = 0x00; break;
 470:	11 ba       	out	0x11, r1	; 17
 472:	08 95       	ret
		   }
		else 
		{
			/*  set Direction value to the custom direction inserted  
            DIO_SetDIO_PORTDirection(DDRA_REG ,0x0F);			*/
			switch (PortID)
 474:	81 30       	cpi	r24, 0x01	; 1
 476:	41 f0       	breq	.+16     	; 0x488 <DIO_SetPortDirection+0x68>
 478:	28 f0       	brcs	.+10     	; 0x484 <DIO_SetPortDirection+0x64>
 47a:	82 30       	cpi	r24, 0x02	; 2
 47c:	39 f0       	breq	.+14     	; 0x48c <DIO_SetPortDirection+0x6c>
 47e:	83 30       	cpi	r24, 0x03	; 3
 480:	39 f0       	breq	.+14     	; 0x490 <DIO_SetPortDirection+0x70>
 482:	08 95       	ret
			{
				case DIO_PORTA : DDRA_REG = Direction; break;
 484:	6a bb       	out	0x1a, r22	; 26
 486:	08 95       	ret
				case DIO_PORTB : DDRB_REG = Direction; break;
 488:	67 bb       	out	0x17, r22	; 23
 48a:	08 95       	ret
				case DIO_PORTC : DDRC_REG = Direction; break;
 48c:	64 bb       	out	0x14, r22	; 20
 48e:	08 95       	ret
				case DIO_PORTD : DDRD_REG = Direction; break;
 490:	61 bb       	out	0x11, r22	; 17
 492:	08 95       	ret

Disassembly of section .text.DIO_SetPinDirection:

00000078 <DIO_SetPinDirection>:
			switch (PortID)
			{
				case DIO_PORTA : PORTA_REG = Value; break;
				case DIO_PORTB : PORTB_REG = Value; break;
				case DIO_PORTC : PORTC_REG = Value; break;
				case DIO_PORTD : PORTD_REG = Value; break;
  78:	84 30       	cpi	r24, 0x04	; 4
  7a:	08 f0       	brcs	.+2      	; 0x7e <DIO_SetPinDirection+0x6>
  7c:	72 c0       	rjmp	.+228    	; 0x162 <DIO_SetPinDirection+0xea>
  7e:	68 30       	cpi	r22, 0x08	; 8
  80:	08 f0       	brcs	.+2      	; 0x84 <DIO_SetPinDirection+0xc>
  82:	6f c0       	rjmp	.+222    	; 0x162 <DIO_SetPinDirection+0xea>
  84:	41 30       	cpi	r20, 0x01	; 1
  86:	a1 f5       	brne	.+104    	; 0xf0 <DIO_SetPinDirection+0x78>
  88:	81 30       	cpi	r24, 0x01	; 1
  8a:	89 f0       	breq	.+34     	; 0xae <DIO_SetPinDirection+0x36>
  8c:	28 f0       	brcs	.+10     	; 0x98 <DIO_SetPinDirection+0x20>
  8e:	82 30       	cpi	r24, 0x02	; 2
  90:	c9 f0       	breq	.+50     	; 0xc4 <DIO_SetPinDirection+0x4c>
  92:	83 30       	cpi	r24, 0x03	; 3
  94:	11 f1       	breq	.+68     	; 0xda <DIO_SetPinDirection+0x62>
  96:	08 95       	ret
  98:	2a b3       	in	r18, 0x1a	; 26
  9a:	81 e0       	ldi	r24, 0x01	; 1
  9c:	90 e0       	ldi	r25, 0x00	; 0
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <DIO_SetPinDirection+0x2c>
  a0:	88 0f       	add	r24, r24
  a2:	99 1f       	adc	r25, r25
  a4:	6a 95       	dec	r22
  a6:	e2 f7       	brpl	.-8      	; 0xa0 <DIO_SetPinDirection+0x28>
  a8:	82 2b       	or	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
  ac:	08 95       	ret
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_SetPinDirection+0x42>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_SetPinDirection+0x3e>
  be:	82 2b       	or	r24, r18
  c0:	87 bb       	out	0x17, r24	; 23
  c2:	08 95       	ret
  c4:	24 b3       	in	r18, 0x14	; 20
  c6:	81 e0       	ldi	r24, 0x01	; 1
  c8:	90 e0       	ldi	r25, 0x00	; 0
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <DIO_SetPinDirection+0x58>
  cc:	88 0f       	add	r24, r24
  ce:	99 1f       	adc	r25, r25
  d0:	6a 95       	dec	r22
  d2:	e2 f7       	brpl	.-8      	; 0xcc <DIO_SetPinDirection+0x54>
  d4:	82 2b       	or	r24, r18
  d6:	84 bb       	out	0x14, r24	; 20
  d8:	08 95       	ret
  da:	21 b3       	in	r18, 0x11	; 17
  dc:	81 e0       	ldi	r24, 0x01	; 1
  de:	90 e0       	ldi	r25, 0x00	; 0
  e0:	02 c0       	rjmp	.+4      	; 0xe6 <DIO_SetPinDirection+0x6e>
  e2:	88 0f       	add	r24, r24
  e4:	99 1f       	adc	r25, r25
  e6:	6a 95       	dec	r22
  e8:	e2 f7       	brpl	.-8      	; 0xe2 <DIO_SetPinDirection+0x6a>
  ea:	82 2b       	or	r24, r18
  ec:	81 bb       	out	0x11, r24	; 17
  ee:	08 95       	ret
  f0:	41 11       	cpse	r20, r1
  f2:	37 c0       	rjmp	.+110    	; 0x162 <DIO_SetPinDirection+0xea>
  f4:	81 30       	cpi	r24, 0x01	; 1
  f6:	91 f0       	breq	.+36     	; 0x11c <DIO_SetPinDirection+0xa4>
  f8:	28 f0       	brcs	.+10     	; 0x104 <DIO_SetPinDirection+0x8c>
  fa:	82 30       	cpi	r24, 0x02	; 2
  fc:	d9 f0       	breq	.+54     	; 0x134 <DIO_SetPinDirection+0xbc>
  fe:	83 30       	cpi	r24, 0x03	; 3
 100:	29 f1       	breq	.+74     	; 0x14c <DIO_SetPinDirection+0xd4>
 102:	08 95       	ret
 104:	2a b3       	in	r18, 0x1a	; 26
 106:	81 e0       	ldi	r24, 0x01	; 1
 108:	90 e0       	ldi	r25, 0x00	; 0
 10a:	02 c0       	rjmp	.+4      	; 0x110 <DIO_SetPinDirection+0x98>
 10c:	88 0f       	add	r24, r24
 10e:	99 1f       	adc	r25, r25
 110:	6a 95       	dec	r22
 112:	e2 f7       	brpl	.-8      	; 0x10c <DIO_SetPinDirection+0x94>
 114:	80 95       	com	r24
 116:	82 23       	and	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
 11a:	08 95       	ret
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPinDirection+0xb0>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPinDirection+0xac>
 12c:	80 95       	com	r24
 12e:	82 23       	and	r24, r18
 130:	87 bb       	out	0x17, r24	; 23
 132:	08 95       	ret
 134:	24 b3       	in	r18, 0x14	; 20
 136:	81 e0       	ldi	r24, 0x01	; 1
 138:	90 e0       	ldi	r25, 0x00	; 0
 13a:	02 c0       	rjmp	.+4      	; 0x140 <DIO_SetPinDirection+0xc8>
 13c:	88 0f       	add	r24, r24
 13e:	99 1f       	adc	r25, r25
 140:	6a 95       	dec	r22
 142:	e2 f7       	brpl	.-8      	; 0x13c <DIO_SetPinDirection+0xc4>
 144:	80 95       	com	r24
 146:	82 23       	and	r24, r18
 148:	84 bb       	out	0x14, r24	; 20
 14a:	08 95       	ret
 14c:	21 b3       	in	r18, 0x11	; 17
 14e:	81 e0       	ldi	r24, 0x01	; 1
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	02 c0       	rjmp	.+4      	; 0x158 <DIO_SetPinDirection+0xe0>
 154:	88 0f       	add	r24, r24
 156:	99 1f       	adc	r25, r25
 158:	6a 95       	dec	r22
 15a:	e2 f7       	brpl	.-8      	; 0x154 <DIO_SetPinDirection+0xdc>
 15c:	80 95       	com	r24
 15e:	82 23       	and	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

Disassembly of section .text.DIO_SetPinValue:

00000164 <DIO_SetPinValue>:
/* ############################# SET BIT VALUE ################################## 
*/
void DIO_SetPinValue(uint_8 PortID , uint_8 PinID,uint_8 Value)
{
	/* Range check*/
	if (PortID <4 && PinID <8)
 164:	84 30       	cpi	r24, 0x04	; 4
 166:	08 f0       	brcs	.+2      	; 0x16a <DIO_SetPinValue+0x6>
 168:	72 c0       	rjmp	.+228    	; 0x24e <DIO_SetPinValue+0xea>
 16a:	68 30       	cpi	r22, 0x08	; 8
 16c:	08 f0       	brcs	.+2      	; 0x170 <DIO_SetPinValue+0xc>
 16e:	6f c0       	rjmp	.+222    	; 0x24e <DIO_SetPinValue+0xea>
	{
		if (Value == HIGH)
 170:	41 30       	cpi	r20, 0x01	; 1
 172:	a1 f5       	brne	.+104    	; 0x1dc <DIO_SetPinValue+0x78>
		{
			switch (PortID)
 174:	81 30       	cpi	r24, 0x01	; 1
 176:	89 f0       	breq	.+34     	; 0x19a <DIO_SetPinValue+0x36>
 178:	28 f0       	brcs	.+10     	; 0x184 <DIO_SetPinValue+0x20>
 17a:	82 30       	cpi	r24, 0x02	; 2
 17c:	c9 f0       	breq	.+50     	; 0x1b0 <DIO_SetPinValue+0x4c>
 17e:	83 30       	cpi	r24, 0x03	; 3
 180:	11 f1       	breq	.+68     	; 0x1c6 <DIO_SetPinValue+0x62>
 182:	08 95       	ret
			{
				case DIO_PORTA : SET_BIT(PORTA_REG,PinID); break;
 184:	2b b3       	in	r18, 0x1b	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	90 e0       	ldi	r25, 0x00	; 0
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_SetPinValue+0x2c>
 18c:	88 0f       	add	r24, r24
 18e:	99 1f       	adc	r25, r25
 190:	6a 95       	dec	r22
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_SetPinValue+0x28>
 194:	82 2b       	or	r24, r18
 196:	8b bb       	out	0x1b, r24	; 27
 198:	08 95       	ret
				case DIO_PORTB : SET_BIT(PORTB_REG,PinID); break;
 19a:	28 b3       	in	r18, 0x18	; 24
 19c:	81 e0       	ldi	r24, 0x01	; 1
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	02 c0       	rjmp	.+4      	; 0x1a6 <DIO_SetPinValue+0x42>
 1a2:	88 0f       	add	r24, r24
 1a4:	99 1f       	adc	r25, r25
 1a6:	6a 95       	dec	r22
 1a8:	e2 f7       	brpl	.-8      	; 0x1a2 <DIO_SetPinValue+0x3e>
 1aa:	82 2b       	or	r24, r18
 1ac:	88 bb       	out	0x18, r24	; 24
 1ae:	08 95       	ret
				case DIO_PORTC : SET_BIT(PORTC_REG,PinID); break;
 1b0:	25 b3       	in	r18, 0x15	; 21
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	90 e0       	ldi	r25, 0x00	; 0
 1b6:	02 c0       	rjmp	.+4      	; 0x1bc <DIO_SetPinValue+0x58>
 1b8:	88 0f       	add	r24, r24
 1ba:	99 1f       	adc	r25, r25
 1bc:	6a 95       	dec	r22
 1be:	e2 f7       	brpl	.-8      	; 0x1b8 <DIO_SetPinValue+0x54>
 1c0:	82 2b       	or	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
 1c4:	08 95       	ret
				case DIO_PORTD : SET_BIT(PORTD_REG,PinID); break;
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPinValue+0x6e>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPinValue+0x6a>
 1d6:	82 2b       	or	r24, r18
 1d8:	82 bb       	out	0x12, r24	; 18
 1da:	08 95       	ret
			}	
		}
		else if (Value == LOW)
 1dc:	41 11       	cpse	r20, r1
 1de:	37 c0       	rjmp	.+110    	; 0x24e <DIO_SetPinValue+0xea>
		{
			switch (PortID)
 1e0:	81 30       	cpi	r24, 0x01	; 1
 1e2:	91 f0       	breq	.+36     	; 0x208 <DIO_SetPinValue+0xa4>
 1e4:	28 f0       	brcs	.+10     	; 0x1f0 <DIO_SetPinValue+0x8c>
 1e6:	82 30       	cpi	r24, 0x02	; 2
 1e8:	d9 f0       	breq	.+54     	; 0x220 <DIO_SetPinValue+0xbc>
 1ea:	83 30       	cpi	r24, 0x03	; 3
 1ec:	29 f1       	breq	.+74     	; 0x238 <DIO_SetPinValue+0xd4>
 1ee:	08 95       	ret
			{
				case DIO_PORTA : CLR_BIT(PORTA_REG,PinID); break;
 1f0:	2b b3       	in	r18, 0x1b	; 27
 1f2:	81 e0       	ldi	r24, 0x01	; 1
 1f4:	90 e0       	ldi	r25, 0x00	; 0
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_SetPinValue+0x98>
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	6a 95       	dec	r22
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_SetPinValue+0x94>
 200:	80 95       	com	r24
 202:	82 23       	and	r24, r18
 204:	8b bb       	out	0x1b, r24	; 27
 206:	08 95       	ret
				case DIO_PORTB : CLR_BIT(PORTB_REG,PinID); break;
 208:	28 b3       	in	r18, 0x18	; 24
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_SetPinValue+0xb0>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	6a 95       	dec	r22
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_SetPinValue+0xac>
 218:	80 95       	com	r24
 21a:	82 23       	and	r24, r18
 21c:	88 bb       	out	0x18, r24	; 24
 21e:	08 95       	ret
				case DIO_PORTC : CLR_BIT(PORTC_REG,PinID); break;
 220:	25 b3       	in	r18, 0x15	; 21
 222:	81 e0       	ldi	r24, 0x01	; 1
 224:	90 e0       	ldi	r25, 0x00	; 0
 226:	02 c0       	rjmp	.+4      	; 0x22c <DIO_SetPinValue+0xc8>
 228:	88 0f       	add	r24, r24
 22a:	99 1f       	adc	r25, r25
 22c:	6a 95       	dec	r22
 22e:	e2 f7       	brpl	.-8      	; 0x228 <DIO_SetPinValue+0xc4>
 230:	80 95       	com	r24
 232:	82 23       	and	r24, r18
 234:	85 bb       	out	0x15, r24	; 21
 236:	08 95       	ret
				case DIO_PORTD : CLR_BIT(PORTD_REG,PinID); break;
 238:	22 b3       	in	r18, 0x12	; 18
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_SetPinValue+0xe0>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	6a 95       	dec	r22
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_SetPinValue+0xdc>
 248:	80 95       	com	r24
 24a:	82 23       	and	r24, r18
 24c:	82 bb       	out	0x12, r24	; 18
 24e:	08 95       	ret

Disassembly of section .text.Spi_MasterInit:

00000494 <Spi_MasterInit>:
	/*	configure SPI MISO Pin as output	*/
	DIO_SetPinDirection(SPI_MISO_PORT, SPI_MISO_CHANNEL, OUTPUT);
	/*	enable SPI Module	*/
	SET_BIT(SPI_SPCR_REG,SPI_SPE_BIT_NO);
	/*	enable SPI Module in Slave mode	*/
	CLR_BIT(SPI_SPCR_REG,SPI_MSTR_BIT_NO);
 494:	41 e0       	ldi	r20, 0x01	; 1
 496:	65 e0       	ldi	r22, 0x05	; 5
 498:	81 e0       	ldi	r24, 0x01	; 1
 49a:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
 49e:	41 e0       	ldi	r20, 0x01	; 1
 4a0:	64 e0       	ldi	r22, 0x04	; 4
 4a2:	81 e0       	ldi	r24, 0x01	; 1
 4a4:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
 4a8:	41 e0       	ldi	r20, 0x01	; 1
 4aa:	67 e0       	ldi	r22, 0x07	; 7
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
 4b2:	40 e0       	ldi	r20, 0x00	; 0
 4b4:	66 e0       	ldi	r22, 0x06	; 6
 4b6:	81 e0       	ldi	r24, 0x01	; 1
 4b8:	0e 94 3c 00 	call	0x78	; 0x78 <DIO_SetPinDirection>
 4bc:	41 e0       	ldi	r20, 0x01	; 1
 4be:	64 e0       	ldi	r22, 0x04	; 4
 4c0:	81 e0       	ldi	r24, 0x01	; 1
 4c2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
 4c6:	8d b1       	in	r24, 0x0d	; 13
 4c8:	80 64       	ori	r24, 0x40	; 64
 4ca:	8d b9       	out	0x0d, r24	; 13
 4cc:	8d b1       	in	r24, 0x0d	; 13
 4ce:	80 61       	ori	r24, 0x10	; 16
 4d0:	8d b9       	out	0x0d, r24	; 13
 4d2:	8d b1       	in	r24, 0x0d	; 13
 4d4:	81 60       	ori	r24, 0x01	; 1
 4d6:	8d b9       	out	0x0d, r24	; 13
 4d8:	08 95       	ret

Disassembly of section .text.Spi_MasterWrite:

00000562 <Spi_MasterWrite>:
}

void Spi_MasterWrite(uint_8 data)
{
 562:	cf 93       	push	r28
 564:	c8 2f       	mov	r28, r24
	uint_8 loc_flush_byte;
	/*	load SPI data register with a byte to send	*/
	DIO_SetPinValue(SPI_SS_PORT,SPI_SS_CHANNEL,LOW);
 566:	40 e0       	ldi	r20, 0x00	; 0
 568:	64 e0       	ldi	r22, 0x04	; 4
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPinValue>
	SPI_SPDR_REG = data;
 570:	cf b9       	out	0x0f, r28	; 15
	/*	wait until byte sent	*/
	while(!(GET_BIT(SPI_SPSR_REG,SPI_SPIF_BIT_NO)));
 572:	77 9b       	sbis	0x0e, 7	; 14
 574:	fe cf       	rjmp	.-4      	; 0x572 <Spi_MasterWrite+0x10>
	/*	flush the data register	*/
	loc_flush_byte = SPI_SPDR_REG;
 576:	8f b1       	in	r24, 0x0f	; 15
}
 578:	cf 91       	pop	r28
 57a:	08 95       	ret

Disassembly of section .text.UART_Init:

00000596 <UART_Init>:
	while (*str != '\0')
	{
		UART_Send(*str);
		str++;
	}
}
 596:	90 bd       	out	0x20, r25	; 32
 598:	89 b9       	out	0x09, r24	; 9
 59a:	8a b1       	in	r24, 0x0a	; 10
 59c:	80 61       	ori	r24, 0x10	; 16
 59e:	8a b9       	out	0x0a, r24	; 10
 5a0:	8a b1       	in	r24, 0x0a	; 10
 5a2:	88 60       	ori	r24, 0x08	; 8
 5a4:	8a b9       	out	0x0a, r24	; 10
 5a6:	80 b5       	in	r24, 0x20	; 32
 5a8:	86 68       	ori	r24, 0x86	; 134
 5aa:	80 bd       	out	0x20, r24	; 32
 5ac:	08 95       	ret

Disassembly of section .text.UART_Read:

000005ae <UART_Read>:
* \Parameters (in) : Nonr
* \Return value:   : data byte received
*******************************************************************************/
uint_8 UART_Read(void)
{
	while(!(UART_UCSRA_REG) & (1<<RXC_BIT_NO));
 5ae:	8b b1       	in	r24, 0x0b	; 11
	return UART_UDR_REG;
 5b0:	8c b1       	in	r24, 0x0c	; 12
	/* Wait for data to be received */
	//while (!(GET_BIT(UART_UCSRA_REG,RXC_BIT_NO)))
			
	/* Get and return received data from buffer */
	//return UART_UDR_REG;
}
 5b2:	08 95       	ret

Disassembly of section .text.libgcc:

0000057c <__movmemx_qi>:
 57c:	99 27       	eor	r25, r25

0000057e <__movmemx_hi>:
 57e:	77 fd       	sbrc	r23, 7
 580:	05 c0       	rjmp	.+10     	; 0x58c <__movmemx_hi+0xe>
 582:	05 90       	lpm	r0, Z+
 584:	0d 92       	st	X+, r0
 586:	01 97       	sbiw	r24, 0x01	; 1
 588:	e1 f7       	brne	.-8      	; 0x582 <__movmemx_hi+0x4>
 58a:	08 95       	ret
 58c:	01 90       	ld	r0, Z+
 58e:	0d 92       	st	X+, r0
 590:	01 97       	sbiw	r24, 0x01	; 1
 592:	e1 f7       	brne	.-8      	; 0x58c <__movmemx_hi+0xe>
 594:	08 95       	ret
